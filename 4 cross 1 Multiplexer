//Gate Level Modelling 
module m_41(i0,i1,i2,i3,s0,s1,out);
  input i0,i1,i2,i3,s0,s1;
  output out;
  wire t0,t1,t2,t3,s0_bar,s1_bar;
  not G1(s0_bar,s0);
  not G2(s1_bar,s1);
  and G3(t0,i0,s0,s1);
  and G4(t1,i1,s0_bar,s1);
  and G5(t2,i2,s0_bar,s1_bar);
  and G6(t3,i3,s0_bar,s1);
  or(out,t0,t1,t2,t3);
endmodule



//Data Flow Level Modelling
module m_41(i0,i1,i2,i3,s0,s1,out);
  input i0,i1,i2,i3,s0,s1;
  output out;
  assign out = s1 ? (s0 ? i3: i2) : (s0 ? i1 : i0); 
endmodule


//Behavioural Modelling 
module m_41(i0,i1,i2,i3,s0,s1,out);
  input i0,i1,i2,i3,s0,s1;
  output out;
  always @ (a or b or c or d or s0, s1)
  begin
  case (s0 | s1)
  2'b00 : out <= a;
  2'b01 : out <= b;
  2'b10 : out <= c;
  2'b11 : out <= d;
  endcase
  end
endmodule





//Structural Level Modelling 
module and_gate(output a, input b, c, d);
  assign a = b & c & d;
endmodule

module not_gate(output f, input e);
  assign e = ~ f;
endmodule

module or_gate(output l, input m, n, o, p);
  assign l = m | n | o | p;
endmodule

module m41(out, a, b, c, d, s0, s1);
  output out;
  input a, b, c, d, s0, s1;
  wire s0bar, s1bar, T1, T2, T3;
  not_gate u1(s1bar, s1);
  not_gate u2(s0bar, s0);
  and_gate u3(T1, a, s0bar, s1bar);
  and_gate u4(T2, b, s0, s1bar);
  and_gate u5(T3, c, s0bar, s1);
  and_gate u6(T4, d, s0, s1);
  or_gate u7(out, T1, T2, T3, T4);
endmodule



//Test Bench
module top;

  wire  out;
  reg  a;
  reg  b;
  reg  c;
  reg  d;
  reg s0, s1;

  m_41 name(.out(out), .a(a), .b(b), .c(c), .d(d), .s0(s0), .s1(s1));
  initial
  begin

    a=1'b0; b=1'b0; c=1'b0; d=1'b0;
    s0=1'b0; s1=1'b0;
    #500 $finish;

   end

  always #40 a=~a;
  always #20 b=~b;
  always #10 c=~c;
  always #5 d=~d;
  always #80 s0=~s0;
  always #160 s1=~s1;

  always@(a or b or c or d or s0 or s1) 
  $monitor("At time = %t, Output = %d", $time, out);

endmodule; 
  
  
